name: Reusable workflow example

on:
  workflow_call:
    inputs:
      expected_pods:
        required: true
        type: string
      
    secrets:
      token:
        required: true

jobs:
  TestIstio:
    runs-on: ubuntu-latest
    steps:  
      - name: setting up minikube
        uses: manusa/actions-setup-minikube@v2.4.1
        with:
          minikube version: 'v1.23.2'
          kubernetes version: 'v1.20.7'
          driver: docker
      - name: Checkout Code
        uses: actions/checkout@v2

      # Build the image by setting appropriate environmental variables in order to access the image from minikube
      - name: Build the tagged Docker image
        run: |
          eval $(minikube -p minikube docker-env) 
          docker build  -t test:test .

      # Setup meshery config.yaml and auth.json
      - name: setup meshery config 
        env:
          provider_token: ${{ secrets.PROVIDER_TOKEN }}
        run:  echo $provider_token ;chmod +x ./.github/scripts/mesheryconf.sh ;./.github/scripts/mesheryconf.sh
        
      # Start meshery server (Assuming that this step will create the meshery namespace)
      - name: Start meshery server using mesheryctl
        run: |
           curl -L https://git.io/meshery | PLATFORM=kubernetes bash -
           sleep 20s
      
      # Start the adapter using yamls
      - name: Start adapter
        run: |
          touch testimagedep.yaml
          curl https://raw.githubusercontent.com/meshery/meshery/master/install/deployment_yamls/k8s/meshery-istio-deployment.yaml > ./testimagedep.yaml
          yq e -i '.spec.template.spec.containers[0].image="test:test"' ./testimagedep.yaml 
          yq e -i '.spec.template.spec.containers[0].imagePullPolicy="Never"' ./testimagedep.yaml 
          cat testimagedep.yaml
          kubectl apply -f testimagedep.yaml --namespace=meshery
          kubectl apply -f https://raw.githubusercontent.com/meshery/meshery/master/install/deployment_yamls/k8s/meshery-istio-service.yaml --namespace=meshery
      
      # Start tunnelling to allocate external IP to LoadBalancer type service(meshery)(SO that we can access meshery from outside)
      - name: Start tunelling
        run: minikube tunnel &> /dev/null &
      - name: wait 10 sec
        run: sleep 10s

      # Checking meshery server logs
      - name: Check meshery pod logs
        run: |
          podName=$(kubectl get pods -o wide -n meshery | sed -n 2p | tr -s ' ' | cut -d " " -f 1)
          kubectl logs pod/$podName -n meshery

      # If external IP has not been allotted then server is unreachable, exit here in that case
      - name: Check if meshery has been allotted external IP
        run: |
              svcstatus=$(kubectl get svc  -n meshery| grep meshery | tr -s ' ' | cut -d " " -f 4)
              echo $svcstatus
              if [ "$svcstatus" = "<pending>" ];then
                 exit 1
              fi

      # Reset meshery's address to the external IP in config.yaml such that mesheryctl can reach it
      - name: Reset meshery address
        run: |
          kubectl get svc -n meshery 
          svcip="http://$(kubectl get svc -n meshery | grep "meshery " | tr -s ' ' | cut -d " " -f 3):9081"
          echo "this is $svcip"
          config='{"contexts":{"local":{"endpoint":'$svcip',"token":"Default","platform":"kubernetes","adapters":[],"channel":"stable","version":"latest"}},"current-context":"local","tokens":[{"location":"auth.json","name":"Default"}]}'
          echo $config  > ~/.meshery/config.yaml

      # This pattern will try to install istio service mesh(Expects three pods to start in istio-system namespace-egress gateway, ingress gateway and istiod)
      - name: Pattern apply (Install service mesh)
        run: mesheryctl pattern apply -f ./.github/install/deploy_istio.yaml 


      - name: Sleep for 60 sec
        run: sleep 60s
   
      - name: Check adapter logs
        run: |
            podname=$(kubectl get pods -n meshery | grep istio | tr -s ' ' | cut -d " " -f 1)
            kubectl logs pod/$podname -n meshery
      - name: Check meshery logs
        run: |
          podName=$(kubectl get pods -o wide -n meshery | sed -n 2p | tr -s ' ' | cut -d " " -f 1)
          kubectl logs pod/$podName -n meshery

        # Check if all three pods are in a Running state

      - name: Check if all expected pods have started
        run: |
          readarray -td, a <<<"istio-egressgateway,istio-ingressgateway,istiod"; declare -p a;
          for pod in "${array[@]}"
            do
              podstatus=$(kubectl get pods  -n istio-system| grep $pod | tr -s ' ' | cut -d " " -f 3)
              echo $podstatus
              if [ "$podstatus" = "Running" ];then
                echo "Pod $pod started"
                 exit 0
              else 
                 echo "Pod $pod not started"
                 exit 1
              fi
            done