name: testk8s

on: 
  push: 
     branches: 
      - main
      - master
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: setting up minikube
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: 'v1.23.2'
          kubernetes version: 'v1.20.7'
          driver: docker
      - name: setenv
        run: eval $(minikube docker-env)
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build the tagged Docker image
        run: docker build  -t testistio:test .
      - name: docker images
        run: docker images
      - name: check a env variable
        run: echo $MINIKUBE_ACTIVE_DOCKERD
      - name: setup meshery config 
        env:
          provider_token: ${{ secrets.PROVIDER_TOKEN }}
        run:  echo $provider_token ;chmod +x ./mesheryconf.sh ;./mesheryconf.sh
        
      - name: Start meshery server using mesheryctl
        run: |
           curl -L https://git.io/meshery | PLATFORM=kubernetes bash -
           sleep 20s
      - name: Try to see if meshery is up
        run: kubectl get pods -n meshery
      - name: start adapter
        run: |
          kubectl apply -f ./.github/meshery-istio-deployment.yaml --namespace=meshery
          kubectl apply -f ./.github/meshery-istio-service.yaml --namespace=meshery
          kubectl apply -f ./.github/service-account.yaml --namespace=meshery
      - name: start tunelling
        run: minikube tunnel &> /dev/null &
      - name: wait 10 sec
        run: sleep 10s
      - name: check if pods started
        run: |
          podName=$(kubectl get pods -o wide -n meshery | sed -n 2p | tr -s ' ' | cut -d " " -f 1)
          kubectl logs pod/$podName -n meshery

      - name: docker PS 
        run: docker ps
      - name: check if external IP is allotted
        run: |
              svcstatus=$(kubectl get svc  -n meshery| grep meshery | tr -s ' ' | cut -d " " -f 4)
              echo $svcstatus
              if [ "$svcstatus" = "<pending>" ];then
                 exit 1
              fi


      - name: reset meshery addr
        run: |
          kubectl get svc -n meshery 
          svcip="http://$(kubectl get svc -n meshery | grep "meshery " | tr -s ' ' | cut -d " " -f 3):9081"
          echo "this is $svcip"
          config='{"contexts":{"local":{"endpoint":'$svcip',"token":"Default","platform":"kubernetes","adapters":[],"channel":"stable","version":"latest"}},"current-context":"local","tokens":[{"location":"auth.json","name":"Default"}]}'
          echo $config  > ~/.meshery/config.yaml
      # #     cat  ~/.meshery/config.yaml
      # - name: port forward
      #   run: kubectl port-forward service/meshery 9081:9081 -n meshery& > /dev/null
      - name: check status
        run: mesheryctl system status
      # - name: change config
      #   run: |
      #    config='{"contexts":{"local":{"endpoint":"http://localhost:9081","token":"Default","platform":"kubernetes","adapters":[],"channel":"stable","version":"latest"}},"current-context":"local","tokens":[{"location":"auth.json","name":"Default"}]}'
      #    echo $config > ~/.meshery/config.yaml
      - name: pattern list 
        run: mesheryctl pattern list
      - name: pattern apply
        run: mesheryctl pattern apply -f ./.github/test.yaml 
      - name: check adapter logs
        run: |
            podname=$(kubectl get pods -n meshery | grep istio | tr -s ' ' | cut -d " " -f 1)
            kubectl logs pod/$podname -n meshery
      - name: check meshery logs
        run: |
          podName=$(kubectl get pods -o wide -n meshery | sed -n 2p | tr -s ' ' | cut -d " " -f 1)
          kubectl logs pod/$podName -n meshery
      - name: Sleep for 60 sec
        run: sleep 60s
      - name: Check is egress gateway is running in istio-system namespace
        run: |
              podstatus=$(kubectl get pods  -n istio-system| grep istio-egressgateway | tr -s ' ' | cut -d " " -f 3)
              echo $podstatus
              if [ "$podstatus" = "Running" ];then
                echo "Pod started"
                 exit 0
              else 
                 echo "Pod not started"
                 exit 1
              fi
      - name: Check is ingress gateway is running in istio-system namespace
        run: |
              podstatus=$(kubectl get pods  -n istio-system| grep istio-ingressgateway | tr -s ' ' | cut -d " " -f 3)
              echo $podstatus
              if [ "$podstatus" = "Running" ];then
                echo "Pod started"
                 exit 0
              else 
                 echo "Pod not started"
                 exit 1
              fi
      - name: Check is control plane is running in istio-system namespace
        run: |
              podstatus=$(kubectl get pods  -n istio-system| grep istiod | tr -s ' ' | cut -d " " -f 3)
              echo $podstatus
              if [ "$podstatus" = "Running" ];then
                echo "Pod started"
                 exit 0
              else 
                 echo "Pod not started"
                 exit 1
              fi
      # - name: Setup Go
      #   uses: actions/setup-go@v2
      #   with:
      #     go-version: 1.16.x
      # - name: start adapter
      #   run: DEBUG=true MESHERY_SERVER=$ENDPOINT:9081 go run main.go &
      # - name: Install service mesh
      #   run: mesheryctl mesh deploy --adapter meshery-istio --namespace istio-system
      # - name: sleep
      #   run: 100s
      # - name: Check
      #   run: kubectl get pods -n istio-system
      # - name: get the routes
      #   run: ip route

